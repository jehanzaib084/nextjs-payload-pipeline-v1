name: PR Quality Checks

on:
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  pr-validation:
    name: Pull Request Validation
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Auto-fix issues in PR
        run: |
          echo "üîß Auto-fixing linting and formatting issues in PR..."
          pnpm lint:fix || echo "‚ö†Ô∏è Some ESLint issues couldn't be auto-fixed"
          pnpm format || echo "‚ö†Ô∏è Some formatting issues couldn't be auto-fixed"

      - name: Validate changed files
        run: |
          echo "üîç Analyzing changed files in PR..."

          # Get list of changed files
          git diff --name-only origin/main...HEAD > changed_files.txt

          # Check if any TypeScript/TSX files changed
          tsx_files=$(grep -E "\.(ts|tsx)$" changed_files.txt || true)
          if [ -n "$tsx_files" ]; then
            echo "‚úÖ TypeScript/TSX files changed:"
            echo "$tsx_files"
            
            # Run type check on changed files
            echo "üîç Type checking changed files..."
            if ! pnpm type-check; then
              echo ""
              echo "‚ùå Type checking failed for changed files!"
              echo ""
              echo "üí° To fix locally:"
              echo "   pnpm type-check"
              echo "   pnpm generate:types  # For Payload CMS types"
              echo ""
              exit 1
            fi
          fi

          # Check for Next.js App Router compliance in changed files
          if echo "$tsx_files" | grep -q "app/"; then
            echo "üöÄ App Router files detected, checking compliance..."
            
            # Check for proper server component patterns
            for file in $(echo "$tsx_files" | grep "app/.*page\.tsx"); do
              if [ -f "$file" ]; then
                echo "üìÑ Checking $file"
                
                # Check if it's a server component (no 'use client')
                if ! grep -q "use client" "$file"; then
                  echo "‚úÖ $file is a Server Component"
                else
                  echo "üîÑ $file is a Client Component"
                fi
                
                # Check for async component (server component best practice)
                if grep -q "export default async function" "$file"; then
                  echo "‚úÖ $file uses async Server Component pattern"
                fi
              fi
            done
          fi

          # Check for Payload CMS related changes
          payload_files=$(echo "$tsx_files" | grep -E "(collections|payload)" || true)
          if [ -n "$payload_files" ]; then
            echo "üéØ Payload CMS files changed:"
            echo "$payload_files"
            
            # Validate Payload config if changed
            if echo "$payload_files" | grep -q "payload.config"; then
              echo "üîß Payload config changed, validating..."
              if ! pnpm payload generate:types; then
                echo ""
                echo "‚ùå Payload config validation failed!"
                echo ""
                echo "üí° To fix locally:"
                echo "   pnpm payload generate:types"
                echo "   Check payload.config.ts for syntax errors"
                echo ""
                exit 1
              fi
            fi
          fi

      - name: Check for breaking changes
        run: |
          echo "‚ö†Ô∏è Checking for potential breaking changes..."

          # Check if package.json changed
          if git diff --name-only origin/main...HEAD | grep -q "package.json"; then
            echo "üì¶ package.json changed"
            
            # Check for dependency changes
            echo "New dependencies:"
            git diff origin/main...HEAD package.json | grep -E "^\+.*\".*\":" || echo "No new dependencies"
            echo "Removed dependencies:"
            git diff origin/main...HEAD package.json | grep -E "^\-.*\".*\":" || echo "No removed dependencies"
          fi

          # Check if environment variables changed
          if git diff --name-only origin/main...HEAD | grep -q ".env.example"; then
            echo "üîß Environment variables changed"
            echo "Please ensure all team members update their .env files:"
            git diff origin/main...HEAD .env.example
          fi

      - name: Code complexity check
        run: |
          echo "üìä Analyzing code complexity..."

          # Simple line count check for changed files
          changed_tsx=$(git diff --name-only origin/main...HEAD | grep -E "\.(ts|tsx)$" || true)

          for file in $changed_tsx; do
            if [ -f "$file" ]; then
              lines=$(wc -l < "$file")
              echo "üìÑ $file: $lines lines"
              
              if [ "$lines" -gt 1000 ]; then
                echo "‚ö†Ô∏è $file is quite large ($lines lines) - consider breaking it down"
              fi
            fi
          done
