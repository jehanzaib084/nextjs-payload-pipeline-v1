name: PR Quality Checks

on:
  pull_request:
    types: [opened, synchronize, reopened]

permissions:
  contents: read
  pull-requests: write
  checks: write

jobs:
  pr-validation:
    name: Pull Request Validation
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Auto-fix issues in PR
        id: autofix
        run: |
          echo "üîß Auto-fixing linting and formatting issues in PR..."
          
          # Capture output
          lint_output=$(pnpm lint:fix 2>&1 || echo "Some ESLint issues couldn't be auto-fixed")
          format_output=$(pnpm format 2>&1 || echo "Some formatting issues couldn't be auto-fixed")
          
          # Save outputs for PR comment
          echo "LINT_OUTPUT<<EOF" >> $GITHUB_OUTPUT
          echo "$lint_output" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          
          echo "FORMAT_OUTPUT<<EOF" >> $GITHUB_OUTPUT
          echo "$format_output" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Validate changed files
        id: validation
        run: |
          echo "üîç Analyzing changed files in PR..."
          
          # Get list of changed files
          git diff --name-only origin/main...HEAD > changed_files.txt
          
          # Initialize results
          validation_results=""
          
          # Check if any TypeScript/TSX files changed
          tsx_files=$(grep -E "\.(ts|tsx)$" changed_files.txt || true)
          if [ -n "$tsx_files" ]; then
            validation_results+="## üìÑ Changed TypeScript/TSX Files\n"
            echo "$tsx_files" | while IFS= read -r file; do
              validation_results+="- \`$file\`\n"
            done
            validation_results+="\n"
            
            # Run type check on changed files
            echo "üîç Type checking changed files..."
            if pnpm type-check; then
              validation_results+="‚úÖ **TypeScript validation passed**\n\n"
              echo "TYPE_CHECK_STATUS=‚úÖ Passed" >> $GITHUB_OUTPUT
            else
              validation_results+="‚ùå **TypeScript validation failed**\n\n"
              echo "TYPE_CHECK_STATUS=‚ùå Failed" >> $GITHUB_OUTPUT
              echo "TYPE_CHECK_FAILED=true" >> $GITHUB_OUTPUT
            fi
          else
            validation_results+="‚ÑπÔ∏è No TypeScript/TSX files changed\n\n"
            echo "TYPE_CHECK_STATUS=‚ÑπÔ∏è Skipped (no TS files)" >> $GITHUB_OUTPUT
          fi

          # Check for Next.js App Router compliance in changed files
          if echo "$tsx_files" | grep -q "app/"; then
            validation_results+="## üöÄ Next.js App Router Analysis\n"
            
            # Check for proper server component patterns
            for file in $(echo "$tsx_files" | grep "app/.*page\.tsx"); do
              if [ -f "$file" ]; then
                # Check if it's a server component (no 'use client')
                if ! grep -q "use client" "$file"; then
                  validation_results+="‚úÖ \`$file\` - Server Component\n"
                else
                  validation_results+="üîÑ \`$file\` - Client Component\n"
                fi
                
                # Check for async component (server component best practice)
                if grep -q "export default async function" "$file"; then
                  validation_results+="  - Uses async Server Component pattern\n"
                fi
              fi
            done
            validation_results+="\n"
          fi

          # Check for Payload CMS related changes
          payload_files=$(echo "$tsx_files" | grep -E "(collections|payload)" || true)
          if [ -n "$payload_files" ]; then
            validation_results+="## üéØ Payload CMS Changes\n"
            echo "$payload_files" | while IFS= read -r file; do
              validation_results+="- \`$file\`\n"
            done
            
            # Validate Payload config if changed
            if echo "$payload_files" | grep -q "payload.config"; then
              validation_results+="\n### Payload Config Validation\n"
              if pnpm payload generate:types; then
                validation_results+="‚úÖ Payload config validation passed\n"
                echo "PAYLOAD_STATUS=‚úÖ Passed" >> $GITHUB_OUTPUT
              else
                validation_results+="‚ùå Payload config validation failed\n"
                echo "PAYLOAD_STATUS=‚ùå Failed" >> $GITHUB_OUTPUT
                echo "PAYLOAD_FAILED=true" >> $GITHUB_OUTPUT
              fi
            fi
            validation_results+="\n"
          fi
          
          # Save validation results
          echo "VALIDATION_RESULTS<<EOF" >> $GITHUB_OUTPUT
          echo -e "$validation_results" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Check for breaking changes
        id: breaking
        run: |
          echo "‚ö†Ô∏è Checking for potential breaking changes..."
          
          breaking_changes=""
          
          # Check if package.json changed
          if git diff --name-only origin/main...HEAD | grep -q "package.json"; then
            breaking_changes+="## üì¶ Package Changes\n"
            
            # Check for dependency changes
            new_deps=$(git diff origin/main...HEAD package.json | grep -E "^\+.*\".*\":" || true)
            removed_deps=$(git diff origin/main...HEAD package.json | grep -E "^\-.*\".*\":" || true)
            
            if [ -n "$new_deps" ]; then
              breaking_changes+="### New Dependencies:\n"
              breaking_changes+="\`\`\`diff\n$new_deps\n\`\`\`\n"
            fi
            
            if [ -n "$removed_deps" ]; then
              breaking_changes+="### Removed Dependencies:\n"
              breaking_changes+="\`\`\`diff\n$removed_deps\n\`\`\`\n"
            fi
            
            breaking_changes+="\n"
          fi

          # Check if environment variables changed
          if git diff --name-only origin/main...HEAD | grep -q ".env.example"; then
            breaking_changes+="## üîß Environment Variables Changed\n"
            breaking_changes+="‚ö†Ô∏è **Team members need to update their .env files**\n\n"
            breaking_changes+="\`\`\`diff\n"
            breaking_changes+="$(git diff origin/main...HEAD .env.example)"
            breaking_changes+="\n\`\`\`\n\n"
          fi
          
          # Save breaking changes
          echo "BREAKING_CHANGES<<EOF" >> $GITHUB_OUTPUT
          echo -e "$breaking_changes" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Code complexity check
        id: complexity
        run: |
          echo "üìä Analyzing code complexity..."
          
          complexity_results="## üìä Code Complexity Analysis\n"
          
          # Simple line count check for changed files
          changed_tsx=$(git diff --name-only origin/main...HEAD | grep -E "\.(ts|tsx)$" || true)
          
          large_files=""
          total_lines=0
          file_count=0
          
          for file in $changed_tsx; do
            if [ -f "$file" ]; then
              lines=$(wc -l < "$file")
              total_lines=$((total_lines + lines))
              file_count=$((file_count + 1))
              
              if [ "$lines" -gt 1000 ]; then
                large_files+="\`$file\` - $lines lines\n"
              fi
              
              complexity_results+="- \`$file\`: $lines lines\n"
            fi
          done
          
          if [ $file_count -gt 0 ]; then
            avg_lines=$((total_lines / file_count))
            complexity_results+="\n**Summary:** $file_count files changed, $total_lines total lines, ~$avg_lines lines per file\n"
          fi
          
          if [ -n "$large_files" ]; then
            complexity_results+="\n‚ö†Ô∏è **Large files** (consider breaking down):\n$large_files"
          fi
          
          # Save complexity results
          echo "COMPLEXITY_RESULTS<<EOF" >> $GITHUB_OUTPUT
          echo -e "$complexity_results" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Create PR comment
        uses: actions/github-script@v7
        if: always()
        with:
          script: |
            const autoFixOutput = `${{ steps.autofix.outputs.LINT_OUTPUT }}`;
            const formatOutput = `${{ steps.autofix.outputs.FORMAT_OUTPUT }}`;
            const validationResults = `${{ steps.validation.outputs.VALIDATION_RESULTS }}`;
            const breakingChanges = `${{ steps.breaking.outputs.BREAKING_CHANGES }}`;
            const complexityResults = `${{ steps.complexity.outputs.COMPLEXITY_RESULTS }}`;
            const typeCheckStatus = `${{ steps.validation.outputs.TYPE_CHECK_STATUS }}`;
            const payloadStatus = `${{ steps.validation.outputs.PAYLOAD_STATUS }}`;
            
            let comment = `# üîç PR Quality Check Results\n\n`;
            
            // Status overview
            comment += `## üìã Overview\n`;
            comment += `- **TypeScript:** ${typeCheckStatus}\n`;
            if (payloadStatus) {
              comment += `- **Payload CMS:** ${payloadStatus}\n`;
            }
            comment += `- **Auto-fix:** ${{ steps.autofix.outcome === 'success' ? '‚úÖ Completed' : '‚ùå Issues found' }}\n\n`;
            
            // Validation results
            if (validationResults) {
              comment += validationResults;
            }
            
            // Breaking changes
            if (breakingChanges) {
              comment += breakingChanges;
            }
            
            // Complexity analysis
            if (complexityResults) {
              comment += complexityResults;
            }
            
            // Auto-fix details
            comment += `\n## üîß Auto-fix Results\n`;
            comment += `<details>\n<summary>Click to view auto-fix details</summary>\n\n`;
            comment += `### ESLint Auto-fix:\n\`\`\`\n${autoFixOutput}\n\`\`\`\n\n`;
            comment += `### Prettier Format:\n\`\`\`\n${formatOutput}\n\`\`\`\n`;
            comment += `</details>\n\n`;
            
            // Tips
            comment += `## üí° Quick Tips\n`;
            comment += `- Run \`pnpm lint:fix\` to auto-fix ESLint issues\n`;
            comment += `- Run \`pnpm format\` to format code\n`;
            comment += `- Run \`pnpm type-check\` to check TypeScript errors\n`;
            comment += `- Run \`pnpm generate:types\` for Payload CMS types\n\n`;
            
            comment += `---\n*This comment is automatically updated on each push*`;
            
            // Find existing comment or create new one
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });
            
            const existingComment = comments.find(comment => 
              comment.body.includes('üîç PR Quality Check Results')
            );
            
            if (existingComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: existingComment.id,
                body: comment
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: comment
              });
            }

      - name: Create job summary
        if: always()
        run: |
          echo "# üîç PR Quality Check Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Status Overview" >> $GITHUB_STEP_SUMMARY
          echo "- **TypeScript:** ${{ steps.validation.outputs.TYPE_CHECK_STATUS }}" >> $GITHUB_STEP_SUMMARY
          if [ -n "${{ steps.validation.outputs.PAYLOAD_STATUS }}" ]; then
            echo "- **Payload CMS:** ${{ steps.validation.outputs.PAYLOAD_STATUS }}" >> $GITHUB_STEP_SUMMARY
          fi
          echo "- **Auto-fix:** ${{ steps.autofix.outcome == 'success' && '‚úÖ Completed' || '‚ùå Issues found' }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ -n "${{ steps.validation.outputs.VALIDATION_RESULTS }}" ]; then
            echo "${{ steps.validation.outputs.VALIDATION_RESULTS }}" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [ -n "${{ steps.breaking.outputs.BREAKING_CHANGES }}" ]; then
            echo "${{ steps.breaking.outputs.BREAKING_CHANGES }}" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [ -n "${{ steps.complexity.outputs.COMPLEXITY_RESULTS }}" ]; then
            echo "${{ steps.complexity.outputs.COMPLEXITY_RESULTS }}" >> $GITHUB_STEP_SUMMARY
          fi

      - name: Fail if critical issues found
        if: steps.validation.outputs.TYPE_CHECK_FAILED == 'true' || steps.validation.outputs.PAYLOAD_FAILED == 'true'
        run: |
          echo "‚ùå Critical issues found that need to be fixed:"
          if [ "${{ steps.validation.outputs.TYPE_CHECK_FAILED }}" == "true" ]; then
            echo "- TypeScript validation failed"
          fi
          if [ "${{ steps.validation.outputs.PAYLOAD_FAILED }}" == "true" ]; then
            echo "- Payload CMS validation failed"
          fi
          echo ""
          echo "Please fix these issues and push again."
          exit 1
