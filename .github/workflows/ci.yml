name: Next.js + Payload CMS Pipeline

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

permissions:
  contents: read
  pull-requests: write
  checks: write

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  pipeline:
    name: Quality Checks & Validation
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Auto-fix issues
        id: autofix
        run: |
          echo "üîß Auto-fixing ESLint and formatting issues..."
          
          # Capture outputs
          lint_output=$(pnpm lint:fix 2>&1 || echo "Some ESLint issues couldn't be auto-fixed")
          format_output=$(pnpm format 2>&1 || echo "Some formatting issues couldn't be auto-fixed")
          
          echo "LINT_OUTPUT<<EOF" >> $GITHUB_OUTPUT
          echo "$lint_output" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          
          echo "FORMAT_OUTPUT<<EOF" >> $GITHUB_OUTPUT
          echo "$format_output" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Code Quality Checks
        id: quality
        run: |
          echo "üîç Running code quality checks..."
          
          quality_results=""
          all_passed=true
          
          # ESLint check
          echo "üìã ESLint validation..."
          if pnpm lint; then
            quality_results+="‚úÖ **ESLint:** No issues found\n"
          else
            quality_results+="‚ùå **ESLint:** Issues found (check logs)\n"
            all_passed=false
          fi
          
          # Prettier check
          echo "üé® Prettier validation..."
          if pnpm format:check; then
            quality_results+="‚úÖ **Prettier:** Code properly formatted\n"
          else
            quality_results+="‚ùå **Prettier:** Code formatting issues found\n"
            all_passed=false
          fi
          
          # TypeScript check
          echo "üîç TypeScript validation..."
          if pnpm type-check; then
            quality_results+="‚úÖ **TypeScript:** No type errors\n"
          else
            quality_results+="‚ùå **TypeScript:** Type errors found\n"
            all_passed=false
          fi
          
          # Payload validation
          echo "üéØ Payload CMS validation..."
          if pnpm payload generate:types; then
            quality_results+="‚úÖ **Payload CMS:** Configuration valid\n"
          else
            quality_results+="‚ùå **Payload CMS:** Configuration issues\n"
            all_passed=false
          fi
          
          # Save results
          echo "QUALITY_RESULTS<<EOF" >> $GITHUB_OUTPUT
          echo -e "$quality_results" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          
          echo "ALL_PASSED=$all_passed" >> $GITHUB_OUTPUT
          
          # Fail if critical issues found
          if [ "$all_passed" = "false" ]; then
            echo ""
            echo "‚ùå Quality checks failed! See details above."
            echo ""
            echo "üí° To fix locally:"
            echo "   pnpm lint:fix        # Fix ESLint issues"
            echo "   pnpm format          # Fix formatting"
            echo "   pnpm type-check      # Check TypeScript"
            echo "   pnpm generate:types  # Generate Payload types"
            echo ""
            exit 1
          fi

      - name: Analyze changes (PR only)
        id: changes
        if: github.event_name == 'pull_request'
        run: |
          echo "üìä Analyzing PR changes..."
          
          # Get changed files
          git diff --name-only origin/main...HEAD > changed_files.txt
          
          changes_summary=""
          
          # TypeScript/TSX files
          tsx_files=$(grep -E "\.(ts|tsx)$" changed_files.txt || true)
          if [ -n "$tsx_files" ]; then
            file_count=$(echo "$tsx_files" | wc -l)
            changes_summary+="## üìÑ Changed Files ($file_count)\n"
            echo "$tsx_files" | head -10 | while IFS= read -r file; do
              lines=$(wc -l < "$file" 2>/dev/null || echo "0")
              changes_summary+="- \`$file\` ($lines lines)\n"
            done
            
            if [ $(echo "$tsx_files" | wc -l) -gt 10 ]; then
              remaining=$(($(echo "$tsx_files" | wc -l) - 10))
              changes_summary+="- ... and $remaining more files\n"
            fi
            changes_summary+="\n"
          fi
          
          # Check for package.json changes
          if git diff --name-only origin/main...HEAD | grep -q "package.json"; then
            changes_summary+="## üì¶ Dependencies Changed\n"
            new_deps=$(git diff origin/main...HEAD package.json | grep -E "^\+.*\".*\":" | head -5 || true)
            removed_deps=$(git diff origin/main...HEAD package.json | grep -E "^\-.*\".*\":" | head -5 || true)
            
            if [ -n "$new_deps" ]; then
              changes_summary+="**Added:**\n\`\`\`diff\n$new_deps\n\`\`\`\n"
            fi
            if [ -n "$removed_deps" ]; then
              changes_summary+="**Removed:**\n\`\`\`diff\n$removed_deps\n\`\`\`\n"
            fi
            changes_summary+="\n"
          fi
          
          # Check for env changes
          if git diff --name-only origin/main...HEAD | grep -q ".env.example"; then
            changes_summary+="## üîß Environment Variables Changed\n"
            changes_summary+="‚ö†Ô∏è Team members may need to update their .env files\n\n"
          fi
          
          echo "CHANGES_SUMMARY<<EOF" >> $GITHUB_OUTPUT
          echo -e "$changes_summary" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Security audit
        id: security
        run: |
          echo "üîí Running security audit..."
          if pnpm audit --audit-level moderate; then
            echo "SECURITY_STATUS=‚úÖ No critical vulnerabilities" >> $GITHUB_OUTPUT
          else
            echo "SECURITY_STATUS=‚ö†Ô∏è Check audit results" >> $GITHUB_OUTPUT
          fi
        continue-on-error: true

      - name: Create PR comment
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const qualityResults = `${{ steps.quality.outputs.QUALITY_RESULTS }}`;
            const changesSum = `${{ steps.changes.outputs.CHANGES_SUMMARY }}`;
            const autoFixLint = `${{ steps.autofix.outputs.LINT_OUTPUT }}`;
            const autoFixFormat = `${{ steps.autofix.outputs.FORMAT_OUTPUT }}`;
            const allPassed = `${{ steps.quality.outputs.ALL_PASSED }}`;
            const securityStatus = `${{ steps.security.outputs.SECURITY_STATUS }}`;
            
            let comment = `# üîç Pipeline Results\n\n`;
            
            // Status overview
            comment += `## üìã Status\n`;
            comment += `${allPassed === 'true' ? '‚úÖ' : '‚ùå'} **Overall:** ${allPassed === 'true' ? 'All checks passed' : 'Issues found'}\n`;
            comment += `üîí **Security:** ${securityStatus}\n\n`;
            
            // Quality results
            comment += `## üèóÔ∏è Code Quality\n`;
            comment += qualityResults + '\n';
            
            // Changes analysis
            if (changesSum) {
              comment += changesSum;
            }
            
            // Auto-fix details (collapsed)
            comment += `## üîß Auto-fix Results\n`;
            comment += `<details>\n<summary>Click to view auto-fix details</summary>\n\n`;
            comment += `**ESLint:**\n\`\`\`\n${autoFixLint}\n\`\`\`\n\n`;
            comment += `**Prettier:**\n\`\`\`\n${autoFixFormat}\n\`\`\`\n`;
            comment += `</details>\n\n`;
            
            // Quick actions
            comment += `## üí° Quick Actions\n`;
            comment += `\`\`\`bash\n`;
            comment += `# Fix issues locally:\n`;
            comment += `pnpm lint:fix        # Auto-fix ESLint\n`;
            comment += `pnpm format          # Format code\n`;
            comment += `pnpm type-check      # Check types\n`;
            comment += `pnpm generate:types  # Payload types\n`;
            comment += `\`\`\`\n\n`;
            
            comment += `---\n*Updated automatically on each push*`;
            
            // Find existing comment
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });
            
            const existing = comments.find(c => c.body.includes('üîç Pipeline Results'));
            
            if (existing) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: existing.id,
                body: comment
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: comment
              });
            }

      - name: Create job summary
        if: always()
        run: |
          echo "# üöÄ Pipeline Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Event:** ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
          echo "**Branch:** ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "**Status:** ${{ steps.quality.outputs.ALL_PASSED == 'true' && '‚úÖ Success' || '‚ùå Failed' }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "## Code Quality Results" >> $GITHUB_STEP_SUMMARY
          echo "${{ steps.quality.outputs.QUALITY_RESULTS }}" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ github.event_name }}" = "pull_request" ] && [ -n "${{ steps.changes.outputs.CHANGES_SUMMARY }}" ]; then
            echo "${{ steps.changes.outputs.CHANGES_SUMMARY }}" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "## Security Status" >> $GITHUB_STEP_SUMMARY
          echo "${{ steps.security.outputs.SECURITY_STATUS }}" >> $GITHUB_STEP_SUMMARY
